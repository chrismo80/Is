@startuml "Architecture"

!include <C4/C4_Component>

!theme materia

Component_Ext(ca, "Custom assertions", "extension methods", "user can add own assertions")
Component_Ext(cta, "Custom TestAdapter", "ITestAdapter", "user can plug in custom test adapter to throw framework exception types (or silently create log entries, data exports, etc.)")

Container_Boundary(Is, "Is") {

    Container_Boundary(Assertions, "Assertions") {
        Component(ext, "Built-in assertions", "extension methods", "actual implementation of different base assertions")
        }

    Container_Boundary(Core, "Core") {
        Component(check, "Check", "That / (Yields) / Unless", "fluent API to simplify condition check and error message creation")
        Component(ass, "Assertion", "Passed / Failed", "single entry point for failure behaviour")
        Component(fail, "Failure", "Reported object", "holds infos like actual / expected values and source code location")
        Component(ctx, "AssertionContext", "Assertion scope", "collects (failed) assertions without throwing on first")
        Component(ita, "ITestAdapter", "Handles Failure(s)", "reports success and failure(s) to \n - test frameworks \n - loggers \n - data exports")
        }

    Component(conf, "Configuration", "Global settings", "control behaviour of core components and assertions")
}


Rel_L(ass, ita, "sends failure to")
Rel(ass, fail, "creates")

Rel_R(ext, check, "uses")
Rel(ext, ass, "pass / fail")

Rel(ctx, ita, "sends failures to")

Rel(check, ass, "pass / fail")
Rel(ass, ctx, "adds successes / failures")

Rel_U(conf, ext, "configures")
Rel_R(conf, fail, "configures")

Rel_L(ca, check, "uses")
Rel_U(cta, ita, "implements")


@enduml