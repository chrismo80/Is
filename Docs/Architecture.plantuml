@startuml "Architecture"

!include <C4/C4_Component>

!theme materia

System_Ext(ca, "Custom assertions", "user can add own assertions")
System_Ext(cta, "Custom TestAdapter", "user can plug in custom test adapter to throw framework exception types")

System_Boundary(Is, "Is") {
    Component(conf, "Configuration", "Global settings", "control behaviour of core components and assertions")

    System_Boundary(Assertions, "Assertions") {
        Component(ext, "Extension methods", "Public assertions", "actual implementation of different assertions")
        }

    System_Boundary(Core, "Core") {
        Component(ass, "Assertion", "Passed / Failed", "single entry point for failure behaviour")
        Component(check, "Check", "That / (Yields) / Unless", "fluent API to simplify condition check and error message creation")
        Component(ctx, "AssertionContext", "Assertion scope", "collects (failed) assertions without throwing on first")
        Component(ita, "ITestAdapter", "Handles Failure(s)", "reports success and failure(s) (e.g. as thrown exceptions, log entries, data exports, etc.")
        Component(fail, "Failure", "Reported object", "holds infos like actual / expected values and source code location")
        }
    }
}

Rel(ass, ita, "sends failure to")
Rel_R(ass, fail, "creates")
Rel_U(ctx, fail, "collects")
Rel_U(cta, ita, "implements")

Rel_U(ext, check, "uses")
Rel(ext, ass, "pass / fail")
Rel_L(ca, check, "uses")

Rel_L(ctx, ita, "sends failures to")

Rel(check, ass, "pass / fail")
Rel(ass, ctx, "adds successes / failures")

Rel_U(conf, ext, "configures")
Rel_R(conf, ass, "configures")
Rel(conf, ita, "configures")

@enduml