@startuml "Is Components"

scale 1

!include <C4/C4_Component>

' LAYOUT_LANDSCAPE()

System_Ext(ca, "Custom assertions", "user can add own assertions")
        
System_Boundary(Is, "Is") {
    Component(ex, "NotException", "Custom exception", "uses call stack to append exact line of user code")
    Component(conf, "Configuration", "Global settings", "control library behaviour, such as ThrowOnFailure, AppendCodeLine, etc.")
    Component(confext, "Configuration", "Global settings", "control assertion behaviour, such as MaxRecursionDepth, FloatingPointComparisonPrecision, etc.")

    System_Boundary(Assertions, "Assertions") {
        Component(ext, "Extension methods", "Public assertions", "actual implementation of different assertions")
        }

    System_Boundary(Core, "Core") {
        Component(ass, "Assertion", "Passed / Failed", "single entry point for failure behaviour")
        Component(check, "Check", "That / (Yields) / Unless", "fluent API to simplify condition check and error message creation")
        Component(ctx, "AssertionContext", "Assertion scope", "collects (failed) assertions without throwing on first")
        }
    }
}

Rel(ass, ex, "throws on failure")
Rel(ctx, ex, "collects failures")

Rel(ext, check, "uses")
Rel(ext, ass, "uses")
Rel_R(ca, check, "uses")

Rel_R(check, ass, "uses")
Rel_R(ass, ctx, "adds successes / failures")

Rel_U(conf, ass, "controls")
Rel_R(conf, ex, "controls")
Rel_L(confext, ext, "controls")

@enduml